'------------------------------------------------------------------------------
' <auto-generated>
'     Il codice è stato generato da uno strumento.
'     Versione runtime:2.0.50727.9164
'
'     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
'     il codice viene rigenerato.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DsMailDaInviare"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DsMailDaInviare
    Inherits Global.System.Data.DataSet
    
    Private tableEmailInviateTOggetto As EmailInviateTOggettoDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("EmailInviateTOggetto")) Is Nothing) Then
                MyBase.Tables.Add(New EmailInviateTOggettoDataTable(ds.Tables("EmailInviateTOggetto")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EmailInviateTOggetto() As EmailInviateTOggettoDataTable
        Get
            Return Me.tableEmailInviateTOggetto
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DsMailDaInviare = CType(MyBase.Clone,DsMailDaInviare)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("EmailInviateTOggetto")) Is Nothing) Then
                MyBase.Tables.Add(New EmailInviateTOggettoDataTable(ds.Tables("EmailInviateTOggetto")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableEmailInviateTOggetto = CType(MyBase.Tables("EmailInviateTOggetto"),EmailInviateTOggettoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEmailInviateTOggetto) Is Nothing) Then
                Me.tableEmailInviateTOggetto.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DsMailDaInviare"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DsMailDaInviare.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableEmailInviateTOggetto = New EmailInviateTOggettoDataTable
        MyBase.Tables.Add(Me.tableEmailInviateTOggetto)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEmailInviateTOggetto() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DsMailDaInviare = New DsMailDaInviare
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub EmailInviateTOggettoRowChangeEventHandler(ByVal sender As Object, ByVal e As EmailInviateTOggettoRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EmailInviateTOggettoDataTable
        Inherits Global.System.Data.TypedTableBase(Of EmailInviateTOggettoRow)
        
        Private columnId As Global.System.Data.DataColumn
        
        Private columnStato As Global.System.Data.DataColumn
        
        Private columnDataInvio As Global.System.Data.DataColumn
        
        Private columnNote As Global.System.Data.DataColumn
        
        Private columnOLDStato As Global.System.Data.DataColumn
        
        Private columnDestinatario As Global.System.Data.DataColumn
        
        Private columnCodice_CoGe As Global.System.Data.DataColumn
        
        Private columnRag_Soc As Global.System.Data.DataColumn
        
        Private columnDenominazione As Global.System.Data.DataColumn
        
        Private columnRiferimento As Global.System.Data.DataColumn
        
        Private columnEmail As Global.System.Data.DataColumn
        
        Private columnEmailInvioScad As Global.System.Data.DataColumn
        
        Private columnEmailInvioFatt As Global.System.Data.DataColumn
        
        Private columnPECEmail As Global.System.Data.DataColumn
        
        Private columnIndirizzo As Global.System.Data.DataColumn
        
        Private columnCAP As Global.System.Data.DataColumn
        
        Private columnLocalita As Global.System.Data.DataColumn
        
        Private columnProvincia As Global.System.Data.DataColumn
        
        Private columnCodice_Fiscale As Global.System.Data.DataColumn
        
        Private columnPartita_IVA As Global.System.Data.DataColumn
        
        Private columnTelefono1 As Global.System.Data.DataColumn
        
        Private columnTelefono2 As Global.System.Data.DataColumn
        
        Private columnCategorie_desc As Global.System.Data.DataColumn
        
        Private columnAgenti_desc As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EmailInviateTOggetto"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStato
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DataInvioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDataInvio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNote
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OLDStatoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOLDStato
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DestinatarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDestinatario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Codice_CoGeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodice_CoGe
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Rag_SocColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRag_Soc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DenominazioneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDenominazione
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RiferimentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRiferimento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailInvioScadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmailInvioScad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailInvioFattColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmailInvioFatt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PECEmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPECEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IndirizzoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIndirizzo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CAPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCAP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocalitaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocalita
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProvinciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProvincia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Codice_FiscaleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodice_Fiscale
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Partita_IVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPartita_IVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Telefono1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Telefono2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Categorie_descColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCategorie_desc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Agenti_descColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAgenti_desc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EmailInviateTOggettoRow
            Get
                Return CType(Me.Rows(index),EmailInviateTOggettoRow)
            End Get
        End Property
        
        Public Event EmailInviateTOggettoRowChanging As EmailInviateTOggettoRowChangeEventHandler
        
        Public Event EmailInviateTOggettoRowChanged As EmailInviateTOggettoRowChangeEventHandler
        
        Public Event EmailInviateTOggettoRowDeleting As EmailInviateTOggettoRowChangeEventHandler
        
        Public Event EmailInviateTOggettoRowDeleted As EmailInviateTOggettoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEmailInviateTOggettoRow(ByVal row As EmailInviateTOggettoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEmailInviateTOggettoRow( _
                    ByVal Stato As Integer,  _
                    ByVal DataInvio As Date,  _
                    ByVal Note As String,  _
                    ByVal OLDStato As Integer,  _
                    ByVal Destinatario As String,  _
                    ByVal Codice_CoGe As String,  _
                    ByVal Rag_Soc As String,  _
                    ByVal Denominazione As String,  _
                    ByVal Riferimento As String,  _
                    ByVal Email As String,  _
                    ByVal EmailInvioScad As String,  _
                    ByVal EmailInvioFatt As String,  _
                    ByVal PECEmail As String,  _
                    ByVal Indirizzo As String,  _
                    ByVal CAP As String,  _
                    ByVal Localita As String,  _
                    ByVal Provincia As String,  _
                    ByVal Codice_Fiscale As String,  _
                    ByVal Partita_IVA As String,  _
                    ByVal Telefono1 As String,  _
                    ByVal Telefono2 As String,  _
                    ByVal Categorie_desc As String,  _
                    ByVal Agenti_desc As String) As EmailInviateTOggettoRow
            Dim rowEmailInviateTOggettoRow As EmailInviateTOggettoRow = CType(Me.NewRow,EmailInviateTOggettoRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Stato, DataInvio, Note, OLDStato, Destinatario, Codice_CoGe, Rag_Soc, Denominazione, Riferimento, Email, EmailInvioScad, EmailInvioFatt, PECEmail, Indirizzo, CAP, Localita, Provincia, Codice_Fiscale, Partita_IVA, Telefono1, Telefono2, Categorie_desc, Agenti_desc}
            rowEmailInviateTOggettoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEmailInviateTOggettoRow)
            Return rowEmailInviateTOggettoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindById(ByVal Id As Integer) As EmailInviateTOggettoRow
            Return CType(Me.Rows.Find(New Object() {Id}),EmailInviateTOggettoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EmailInviateTOggettoDataTable = CType(MyBase.Clone,EmailInviateTOggettoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EmailInviateTOggettoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId = MyBase.Columns("Id")
            Me.columnStato = MyBase.Columns("Stato")
            Me.columnDataInvio = MyBase.Columns("DataInvio")
            Me.columnNote = MyBase.Columns("Note")
            Me.columnOLDStato = MyBase.Columns("OLDStato")
            Me.columnDestinatario = MyBase.Columns("Destinatario")
            Me.columnCodice_CoGe = MyBase.Columns("Codice_CoGe")
            Me.columnRag_Soc = MyBase.Columns("Rag_Soc")
            Me.columnDenominazione = MyBase.Columns("Denominazione")
            Me.columnRiferimento = MyBase.Columns("Riferimento")
            Me.columnEmail = MyBase.Columns("Email")
            Me.columnEmailInvioScad = MyBase.Columns("EmailInvioScad")
            Me.columnEmailInvioFatt = MyBase.Columns("EmailInvioFatt")
            Me.columnPECEmail = MyBase.Columns("PECEmail")
            Me.columnIndirizzo = MyBase.Columns("Indirizzo")
            Me.columnCAP = MyBase.Columns("CAP")
            Me.columnLocalita = MyBase.Columns("Localita")
            Me.columnProvincia = MyBase.Columns("Provincia")
            Me.columnCodice_Fiscale = MyBase.Columns("Codice_Fiscale")
            Me.columnPartita_IVA = MyBase.Columns("Partita_IVA")
            Me.columnTelefono1 = MyBase.Columns("Telefono1")
            Me.columnTelefono2 = MyBase.Columns("Telefono2")
            Me.columnCategorie_desc = MyBase.Columns("Categorie_desc")
            Me.columnAgenti_desc = MyBase.Columns("Agenti_desc")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId = New Global.System.Data.DataColumn("Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId)
            Me.columnStato = New Global.System.Data.DataColumn("Stato", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStato)
            Me.columnDataInvio = New Global.System.Data.DataColumn("DataInvio", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDataInvio)
            Me.columnNote = New Global.System.Data.DataColumn("Note", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNote)
            Me.columnOLDStato = New Global.System.Data.DataColumn("OLDStato", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOLDStato)
            Me.columnDestinatario = New Global.System.Data.DataColumn("Destinatario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDestinatario)
            Me.columnCodice_CoGe = New Global.System.Data.DataColumn("Codice_CoGe", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodice_CoGe)
            Me.columnRag_Soc = New Global.System.Data.DataColumn("Rag_Soc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRag_Soc)
            Me.columnDenominazione = New Global.System.Data.DataColumn("Denominazione", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDenominazione)
            Me.columnRiferimento = New Global.System.Data.DataColumn("Riferimento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRiferimento)
            Me.columnEmail = New Global.System.Data.DataColumn("Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmail)
            Me.columnEmailInvioScad = New Global.System.Data.DataColumn("EmailInvioScad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmailInvioScad)
            Me.columnEmailInvioFatt = New Global.System.Data.DataColumn("EmailInvioFatt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmailInvioFatt)
            Me.columnPECEmail = New Global.System.Data.DataColumn("PECEmail", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPECEmail)
            Me.columnIndirizzo = New Global.System.Data.DataColumn("Indirizzo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIndirizzo)
            Me.columnCAP = New Global.System.Data.DataColumn("CAP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCAP)
            Me.columnLocalita = New Global.System.Data.DataColumn("Localita", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocalita)
            Me.columnProvincia = New Global.System.Data.DataColumn("Provincia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProvincia)
            Me.columnCodice_Fiscale = New Global.System.Data.DataColumn("Codice_Fiscale", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodice_Fiscale)
            Me.columnPartita_IVA = New Global.System.Data.DataColumn("Partita_IVA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPartita_IVA)
            Me.columnTelefono1 = New Global.System.Data.DataColumn("Telefono1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono1)
            Me.columnTelefono2 = New Global.System.Data.DataColumn("Telefono2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono2)
            Me.columnCategorie_desc = New Global.System.Data.DataColumn("Categorie_desc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCategorie_desc)
            Me.columnAgenti_desc = New Global.System.Data.DataColumn("Agenti_desc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAgenti_desc)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AutoIncrementSeed = -1
            Me.columnId.AutoIncrementStep = -1
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnNote.MaxLength = 1073741823
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEmailInviateTOggettoRow() As EmailInviateTOggettoRow
            Return CType(Me.NewRow,EmailInviateTOggettoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EmailInviateTOggettoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EmailInviateTOggettoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EmailInviateTOggettoRowChangedEvent) Is Nothing) Then
                RaiseEvent EmailInviateTOggettoRowChanged(Me, New EmailInviateTOggettoRowChangeEvent(CType(e.Row,EmailInviateTOggettoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EmailInviateTOggettoRowChangingEvent) Is Nothing) Then
                RaiseEvent EmailInviateTOggettoRowChanging(Me, New EmailInviateTOggettoRowChangeEvent(CType(e.Row,EmailInviateTOggettoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EmailInviateTOggettoRowDeletedEvent) Is Nothing) Then
                RaiseEvent EmailInviateTOggettoRowDeleted(Me, New EmailInviateTOggettoRowChangeEvent(CType(e.Row,EmailInviateTOggettoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EmailInviateTOggettoRowDeletingEvent) Is Nothing) Then
                RaiseEvent EmailInviateTOggettoRowDeleting(Me, New EmailInviateTOggettoRowChangeEvent(CType(e.Row,EmailInviateTOggettoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEmailInviateTOggettoRow(ByVal row As EmailInviateTOggettoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsMailDaInviare = New DsMailDaInviare
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EmailInviateTOggettoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EmailInviateTOggettoRow
        Inherits Global.System.Data.DataRow
        
        Private tableEmailInviateTOggetto As EmailInviateTOggettoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEmailInviateTOggetto = CType(Me.Table,EmailInviateTOggettoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id() As Integer
            Get
                Return CType(Me(Me.tableEmailInviateTOggetto.IdColumn),Integer)
            End Get
            Set
                Me(Me.tableEmailInviateTOggetto.IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stato() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEmailInviateTOggetto.StatoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Stato' nella tabella 'EmailInviateTOggetto' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmailInviateTOggetto.StatoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DataInvio() As Date
            Get
                Try 
                    Return CType(Me(Me.tableEmailInviateTOggetto.DataInvioColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'DataInvio' nella tabella 'EmailInviateTOggetto' è DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableEmailInviateTOggetto.DataInvioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Note() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmailInviateTOggetto.NoteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Note' nella tabella 'EmailInviateTOggetto' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmailInviateTOggetto.NoteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OLDStato() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEmailInviateTOggetto.OLDStatoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'OLDStato' nella tabella 'EmailInviateTOggetto' è DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableEmailInviateTOggetto.OLDStatoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Destinatario() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmailInviateTOggetto.DestinatarioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Destinatario' nella tabella 'EmailInviateTOggetto' è DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmailInviateTOggetto.DestinatarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codice_CoGe() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmailInviateTOggetto.Codice_CoGeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Codice_CoGe' nella tabella 'EmailInviateTOggetto' è DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmailInviateTOggetto.Codice_CoGeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rag_Soc() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmailInviateTOggetto.Rag_SocColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Rag_Soc' nella tabella 'EmailInviateTOggetto' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmailInviateTOggetto.Rag_SocColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Denominazione() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmailInviateTOggetto.DenominazioneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Denominazione' nella tabella 'EmailInviateTOggetto' è DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmailInviateTOggetto.DenominazioneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Riferimento() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmailInviateTOggetto.RiferimentoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Riferimento' nella tabella 'EmailInviateTOggetto' è DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmailInviateTOggetto.RiferimentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Email() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmailInviateTOggetto.EmailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Email' nella tabella 'EmailInviateTOggetto' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmailInviateTOggetto.EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmailInvioScad() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmailInviateTOggetto.EmailInvioScadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'EmailInvioScad' nella tabella 'EmailInviateTOggetto' è D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmailInviateTOggetto.EmailInvioScadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmailInvioFatt() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmailInviateTOggetto.EmailInvioFattColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'EmailInvioFatt' nella tabella 'EmailInviateTOggetto' è D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmailInviateTOggetto.EmailInvioFattColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PECEmail() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmailInviateTOggetto.PECEmailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'PECEmail' nella tabella 'EmailInviateTOggetto' è DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableEmailInviateTOggetto.PECEmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Indirizzo() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmailInviateTOggetto.IndirizzoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Indirizzo' nella tabella 'EmailInviateTOggetto' è DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableEmailInviateTOggetto.IndirizzoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CAP() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmailInviateTOggetto.CAPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'CAP' nella tabella 'EmailInviateTOggetto' è DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmailInviateTOggetto.CAPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Localita() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmailInviateTOggetto.LocalitaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Localita' nella tabella 'EmailInviateTOggetto' è DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableEmailInviateTOggetto.LocalitaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Provincia() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmailInviateTOggetto.ProvinciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Provincia' nella tabella 'EmailInviateTOggetto' è DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableEmailInviateTOggetto.ProvinciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codice_Fiscale() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmailInviateTOggetto.Codice_FiscaleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Codice_Fiscale' nella tabella 'EmailInviateTOggetto' è D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmailInviateTOggetto.Codice_FiscaleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Partita_IVA() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmailInviateTOggetto.Partita_IVAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Partita_IVA' nella tabella 'EmailInviateTOggetto' è DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmailInviateTOggetto.Partita_IVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono1() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmailInviateTOggetto.Telefono1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Telefono1' nella tabella 'EmailInviateTOggetto' è DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableEmailInviateTOggetto.Telefono1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono2() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmailInviateTOggetto.Telefono2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Telefono2' nella tabella 'EmailInviateTOggetto' è DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableEmailInviateTOggetto.Telefono2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Categorie_desc() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmailInviateTOggetto.Categorie_descColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Categorie_desc' nella tabella 'EmailInviateTOggetto' è D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmailInviateTOggetto.Categorie_descColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Agenti_desc() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmailInviateTOggetto.Agenti_descColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("Il valore della colonna 'Agenti_desc' nella tabella 'EmailInviateTOggetto' è DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmailInviateTOggetto.Agenti_descColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatoNull() As Boolean
            Return Me.IsNull(Me.tableEmailInviateTOggetto.StatoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatoNull()
            Me(Me.tableEmailInviateTOggetto.StatoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDataInvioNull() As Boolean
            Return Me.IsNull(Me.tableEmailInviateTOggetto.DataInvioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDataInvioNull()
            Me(Me.tableEmailInviateTOggetto.DataInvioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNoteNull() As Boolean
            Return Me.IsNull(Me.tableEmailInviateTOggetto.NoteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNoteNull()
            Me(Me.tableEmailInviateTOggetto.NoteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOLDStatoNull() As Boolean
            Return Me.IsNull(Me.tableEmailInviateTOggetto.OLDStatoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOLDStatoNull()
            Me(Me.tableEmailInviateTOggetto.OLDStatoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDestinatarioNull() As Boolean
            Return Me.IsNull(Me.tableEmailInviateTOggetto.DestinatarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDestinatarioNull()
            Me(Me.tableEmailInviateTOggetto.DestinatarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodice_CoGeNull() As Boolean
            Return Me.IsNull(Me.tableEmailInviateTOggetto.Codice_CoGeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodice_CoGeNull()
            Me(Me.tableEmailInviateTOggetto.Codice_CoGeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRag_SocNull() As Boolean
            Return Me.IsNull(Me.tableEmailInviateTOggetto.Rag_SocColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRag_SocNull()
            Me(Me.tableEmailInviateTOggetto.Rag_SocColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDenominazioneNull() As Boolean
            Return Me.IsNull(Me.tableEmailInviateTOggetto.DenominazioneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDenominazioneNull()
            Me(Me.tableEmailInviateTOggetto.DenominazioneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRiferimentoNull() As Boolean
            Return Me.IsNull(Me.tableEmailInviateTOggetto.RiferimentoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRiferimentoNull()
            Me(Me.tableEmailInviateTOggetto.RiferimentoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tableEmailInviateTOggetto.EmailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailNull()
            Me(Me.tableEmailInviateTOggetto.EmailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailInvioScadNull() As Boolean
            Return Me.IsNull(Me.tableEmailInviateTOggetto.EmailInvioScadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailInvioScadNull()
            Me(Me.tableEmailInviateTOggetto.EmailInvioScadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailInvioFattNull() As Boolean
            Return Me.IsNull(Me.tableEmailInviateTOggetto.EmailInvioFattColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailInvioFattNull()
            Me(Me.tableEmailInviateTOggetto.EmailInvioFattColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPECEmailNull() As Boolean
            Return Me.IsNull(Me.tableEmailInviateTOggetto.PECEmailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPECEmailNull()
            Me(Me.tableEmailInviateTOggetto.PECEmailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIndirizzoNull() As Boolean
            Return Me.IsNull(Me.tableEmailInviateTOggetto.IndirizzoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIndirizzoNull()
            Me(Me.tableEmailInviateTOggetto.IndirizzoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCAPNull() As Boolean
            Return Me.IsNull(Me.tableEmailInviateTOggetto.CAPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCAPNull()
            Me(Me.tableEmailInviateTOggetto.CAPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocalitaNull() As Boolean
            Return Me.IsNull(Me.tableEmailInviateTOggetto.LocalitaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocalitaNull()
            Me(Me.tableEmailInviateTOggetto.LocalitaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProvinciaNull() As Boolean
            Return Me.IsNull(Me.tableEmailInviateTOggetto.ProvinciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProvinciaNull()
            Me(Me.tableEmailInviateTOggetto.ProvinciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodice_FiscaleNull() As Boolean
            Return Me.IsNull(Me.tableEmailInviateTOggetto.Codice_FiscaleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodice_FiscaleNull()
            Me(Me.tableEmailInviateTOggetto.Codice_FiscaleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPartita_IVANull() As Boolean
            Return Me.IsNull(Me.tableEmailInviateTOggetto.Partita_IVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPartita_IVANull()
            Me(Me.tableEmailInviateTOggetto.Partita_IVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefono1Null() As Boolean
            Return Me.IsNull(Me.tableEmailInviateTOggetto.Telefono1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefono1Null()
            Me(Me.tableEmailInviateTOggetto.Telefono1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefono2Null() As Boolean
            Return Me.IsNull(Me.tableEmailInviateTOggetto.Telefono2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefono2Null()
            Me(Me.tableEmailInviateTOggetto.Telefono2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCategorie_descNull() As Boolean
            Return Me.IsNull(Me.tableEmailInviateTOggetto.Categorie_descColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCategorie_descNull()
            Me(Me.tableEmailInviateTOggetto.Categorie_descColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAgenti_descNull() As Boolean
            Return Me.IsNull(Me.tableEmailInviateTOggetto.Agenti_descColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAgenti_descNull()
            Me(Me.tableEmailInviateTOggetto.Agenti_descColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EmailInviateTOggettoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EmailInviateTOggettoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EmailInviateTOggettoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EmailInviateTOggettoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
